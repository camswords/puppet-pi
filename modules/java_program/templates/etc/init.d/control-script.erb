#!/bin/sh

### BEGIN INIT INFO
# Provides:          <%= @program_name %>
# Required-Start:    $local_fs $network $remote_fs
# Required-Stop:     $local_fs $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: <%= @program_name %>
# Description:       <%= @program_name %>
### END INIT INFO

PID_FILE="/var/run/<%= @program_name %>/<%= @program_name %>.pid"
LOG_FILE="/var/log/<%= @program_name %>/<%= @program_name %>.log"
JAR_FILE="/opt/<%= @program_name %>/<%= @jar_file %>"

process_is_alive() {
	local pid="$1"
	ps -p $pid | grep $pid > /dev/null 2>&1
}

check_running_process_matches_recorded_pid() {
	local pidfile="$1"
	local pid
	
	pid=`cat "$pidfile" 2>/dev/null`
	if [ "$pid" = '' ];then
		# could not read the pid, for whatever reason.
		return 1
	fi
	
	process_is_alive $pid
}

kill_process() {
	local pid="$1"
	local signal="$2"
	local second
	
	kill -"$signal" "$pid"
	
	# ensure that the bugger is gone.
	for second in 0 1 2 3 4 5 6 7 8 9 10; do
		process_is_alive "$pid"
		if [ "$?" -ne 0 ];then
			return 0
		fi
		
		sleep 1
	done
	
	return 1
}

kill_process_with_recorded_pid() {
	local pidfile="$1"
	local pid
	
	pid=`cat "$pidfile" 2>/dev/null`
	if [ "$pid" = '' ];then
		# if we can't read the pid file, we assume the process is not running
		return 0
	fi
	
	# Kill gracefully
	if kill_process "$pid" 15;then
		return 0
	fi
	
	# Screw this, kill it properly.
	if kill_process "$pid" 9;then
		return 0
	fi
	
	return 1
}

case $1 in 
start)
	check_running_process_matches_recorded_pid $PID_FILE
	if [ "$?" -eq 0 ];then
		echo "$0 is already running"
		exit 0
	fi

	java -jar $JAR_FILE > $LOG_FILE 2>&1 &
	
	if [ "$?" -ne 0 ];then
		echo "failed to start $0."
		exit $?
	fi
	
	rm -rf $PID_FILE
	echo $! > $PID_FILE
	echo "started $0."
	exit 0
	;;
stop)
	kill_process_with_recorded_pid $PID_FILE

	if [ "$?" -eq 0 ];then
		rm -rf $PID_FILE > /dev/null 2>&1
		echo "$0 is stopped."
		exit 0
	else
		echo "failed to stop $0."
		exit 1
	fi
	;;
status)
	check_running_process_matches_recorded_pid $PID_FILE
	if [ "$?" -eq 0 ];then
		echo "$0 is running."
		exit 0
	else
		echo "$0 is not running."
		exit 1
	fi
	;;
restart)
	$0 stop
	$0 start
	;;
*)
	echo "Usage: $0 (start|stop|status|restart)"
	exit 1
	;;
esac